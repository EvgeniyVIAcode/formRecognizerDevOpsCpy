@*
* Notice: Any links, references, or attachments that contain sample scripts, code, or commands comes with the following notification.
*
* This Sample Code is provided for the purpose of illustration only and is not intended to be used in a production environment.
* THIS SAMPLE CODE AND ANY RELATED INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
* INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
*
* We grant You a nonexclusive, royalty-free right to use and modify the Sample Code and to reproduce and distribute the object code form of the Sample Code,
* provided that You agree:
*
* (i) to not use Our name, logo, or trademarks to market Your software product in which the Sample Code is embedded;
* (ii) to include a valid copyright notice on Your software product in which the Sample Code is embedded; and
* (iii) to indemnify, hold harmless, and defend Us and Our suppliers from and against any claims or lawsuits,
* including attorneys’ fees, that arise or result from the use or distribution of the Sample Code.
*
* Please note: None of the conditions outlined in the disclaimer above will superseded the terms and conditions contained within the Premier Customer Services Description.
*
* DEMO POC - "AS IS"
*@
@page "/"

@inject IModelService _modelService
@inject IStateService _stateService
@inject IJSRuntime _jsRuntime
@inject NavigationManager _navigationManager

<h2>List of trained model in an environment</h2>

<Loading IsLoading="@IsLoading" />

<div class="row" style="margin-top:25px">
    <div class="col-md-2">
        <Environments OnEnvironmentChanged="(async (e) => await OnEnvironmentChanged(e))"/>
    </div>
</div>

@if (Models != null)
{
    <div class=row  style="margin-top:30px">
        <div class=col-md-12>
            <table class="table table-striped table-hover">
              <thead>
                <tr>
                  <th scope="col">ModelId</th>
                  <th scope="col">Description</th>
                  <th scope="col">CreatedOn</th> 
                  <th></th>
                  <th></th>
                </tr>
              </thead>
              <tbody>
                @foreach(var model in Models)
                {
                    <tr>
                        <td>@model.ModelId</td>
                        <td>@model.Description</td>
                        <td>@model.CreatedOn</td>
                        <td>
                            <button class="btn btn-primary" @onclick="(() => OnTestModel(model))">
                                TEST
                            </button>
                        </td>
                        <td>
                            <button class="btn btn-danger" @onclick="(async () => await OnDeleteModel(model))">
                                DELETE
                            </button>
                        </td>
                    </tr>        
                }
              </tbody>
            </table>
        </div>
    </div>    
}


@code {
    private bool IsLoading = false;

    private IList<ModelInfo> Models;
    private MODEL_ENVIRONMENT SelectedEnvironment;

    private async Task OnEnvironmentChanged(MODEL_ENVIRONMENT environment)
    {
        IsLoading = true;
        SelectedEnvironment = environment;
        Models = await _modelService.GetModelsAsync(environment);
        IsLoading = false;
    }

    private async Task OnDeleteModel(ModelInfo model)
    {
        bool confirmed = await _jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the model {model.ModelId}");
        if (confirmed)
        {
            IsLoading = true;
            bool success = await _modelService.DeleteModelAsync(model.ModelId, SelectedEnvironment);

            if (success)
            {
                Models.Remove(model);
            }

            IsLoading = false;
        }
    }

    private void OnTestModel(ModelInfo model)
    {
        _stateService.SelectedModel = model;
        _stateService.SelectedEnvironment = SelectedEnvironment;
        _navigationManager.NavigateTo("/analyze");
    }
}
